name: Release draft

on:
  push:
    tags:
      - v*
  workflow_dispatch:

jobs:
  draft_release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/create-release@v1
        id: draft_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: "recall ${{ github.ref_name }}"
          body: |
            Version ${{ github.ref_name }}.
          draft: true
          prerelease: false
    outputs:
      upload_url: ${{ steps.draft_release.outputs.upload_url }}

  build_assets:
    needs: draft_release
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            goos: linux
            goarch: amd64
          - os: ubuntu-latest
            goos: linux
            goarch: arm64
          - os: ubuntu-22.04
            goos: linux
            goarch: 386
          - os: ubuntu-latest
            goos: windows
            goarch: amd64
          - os: ubuntu-latest
            goos: windows
            goarch: 386
          - os: macos-latest
            goos: darwin
            goarch: amd64
          - os: macos-latest
            goos: darwin
            goarch: arm64

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-go@v5
        with:
          go-version: ^1.24.2

      - name: Install cross-compilation tools
        run: |
          if [ "${{ matrix.goos }}" = "linux" ]; then
            sudo apt update
            sudo apt install -y gcc
            if [ "${{ matrix.goarch }}" = "arm64" ]; then
              sudo apt install -y gcc-aarch64-linux-gnu
            elif [ "${{ matrix.goarch }}" = "386" ]; then
              sudo apt install -y g++ gcc-multilib g++-multilib libc6-dev-i386
            fi
          elif [ "${{ matrix.goos }}" = "windows" ]; then
            sudo apt update
            sudo apt install -y mingw-w64
          fi

      - name: Build recall binary
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          CGO_ENABLED: 1
        run: |
          BUILD_DIR="recall-${{ github.ref_name }}-${GOOS}-${GOARCH}"
          mkdir "$BUILD_DIR"
          cp README.md "$BUILD_DIR/README.md"

          EXTENSION=""
          if [ "$GOOS" = "windows" ]; then EXTENSION=".exe"; fi

          # Select correct compiler for CGO cross builds
          if [ "$GOOS" = "windows" ]; then
            if [ "$GOARCH" = "amd64" ]; then export CC="x86_64-w64-mingw32-gcc"; fi
            if [ "$GOARCH" = "arm64" ]; then export CC="aarch64-linux-gnu-gcc"; fi
            if [ "$GOARCH" = "386" ]; then export CC="i686-w64-mingw32-gcc"; fi
          elif [ "$GOOS" = "linux" ]; then
            if [ "$GOARCH" = "arm64" ]; then export CC="aarch64-linux-gnu-gcc"; fi
          fi

          go build -tags tui -o "$BUILD_DIR/recall${EXTENSION}" ./cmd/recall
          zip -r "$BUILD_DIR.zip" "$BUILD_DIR"

      - name: Upload release assets for each valid (GOOS, GOARH) pair
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.draft_release.outputs.upload_url }}
          asset_path: ./recall-${{ github.ref_name }}-${{ matrix.goos }}-${{ matrix.goarch }}.zip
          asset_name: recall-${{ github.ref_name }}-${{ matrix.goos }}-${{ matrix.goarch }}.zip
          asset_content_type: application/zip
